"""
Project Name: Maths Quiz
Author: Arnav Kumar
Date Created: 11/06/2025
Last Modified: 19/07/2025
Description: This is a program to help students learn and practice maths.
Language Used: Python 3.10
Files Required: None
Known Issues: None
"""

# Import libraries.
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
import random
import math
import csv
import os


# This is a class that runs the leaderboard functions of the program.
class Leaderboard:

    # This is a function that sets up the class.
    def __init__(self, filename = "leaderboard.csv"):

        self.filename = filename


    # This is a function that saves the user's score.
    def save_score(self, name, score):

        file_exists = os.path.isfile(self.filename)

        # Opens the file.
        with open(self.filename, mode = "a", newline = "") as file:
            writer = csv.writer(file)

            # Write headers if the file doesnt exist.
            if not file_exists:
                writer.writerow(["Name", "Score"])

            # Write the name and score onto the file.
            writer.writerow([name, score])


    # This is a function that gets the top scores and sorts it.
    def get_top_scores(self, limit = 10):

        # Opens the file.
        with open(self.filename, "r") as file:
            reader = list(csv.reader(file))[1:]

            # Sorts the scores from highest to lowest.
            return sorted(
                [(row[0], int(row[1])) for row in reader if len(row) == 2 and row[1].isdigit()],
                key = lambda x: x[1],
                reverse = True
            )[:limit]



# This is a class that runs the quiz side of the program.
class MathsQuiz:

    # This is a function that sets up the windows.
    def initialise(self):

        # Create constants so I can easily change the fonts.
        self.FONT_HEADER = ("Times New Roman", 30, "bold")
        self.FONT_LABEL = ("Times New Roman", 14)
        self.LEADERBOARD_LABEL = ("Times New Roman", 14, "bold")
        self.FONT_BUTTON = ("Times New Roman", 18)

        self.difficulty_window = None
        self.questions_window = None
        self.leaderboard_window = None
        
        # Create class scope variables.
        self.correct_answer = ""
        self.current_difficulty = "basic"
        self.score = 0
        self.questions_answered = 0
        self.time_left = 10

        # Setup for the instructions window.
        self.instructions_window = Tk()
        self.instructions_window.title("Instructions")
        self.instructions_window.geometry("500x400")
        self.instructions_window.resizable(False, False)

        # Setup for the difficulty window.
        self.difficulty_window = Toplevel(self.instructions_window)
        self.difficulty_window.title("Difficulty")
        self.difficulty_window.geometry("500x400")
        self.difficulty_window.resizable(False, False)
        self.difficulty_window.withdraw()

        # Setup for the questions window.
        self.question_window = Toplevel(self.instructions_window)
        self.question_window.title("Questions")
        self.question_window.geometry("500x400")
        self.question_window.resizable(False, False)
        self.question_window.withdraw()
        
        # Setup for the leaderboard window.
        self.leaderboard_window = Toplevel(self.instructions_window)
        self.leaderboard_window.title("Leaderboard")
        self.leaderboard_window.geometry("500x400")
        self.leaderboard_window.resizable(False, False)
        self.leaderboard_window.withdraw()

        self.leaderboard = Leaderboard()

        self.create_instructions_window()
        self.instructions_window.mainloop()


    # This is a function that creates the instructions window.
    def create_instructions_window(self):

        # This hides the leaderboard window.
        self.leaderboard_window.withdraw()
        
        # Load and resize the background image.
        original_image = Image.open("background.png")
        resized_image = original_image.resize((500, 400))
        self.instructions_background_colour = ImageTk.PhotoImage(resized_image)

        # Set up the canvas.
        self.instructions_canvas = Canvas(self.instructions_window, highlightthickness = 0)
        self.instructions_canvas.place(x = 0, y = 0, width = 500, height = 400)

        # Draw the background image.
        self.instructions_canvas.create_image(0, 0, image = self.instructions_background_colour, anchor = "nw")

        # Create the text.
        self.instructions_canvas.create_text(250, 60, text = "Maths Quiz", font = self.FONT_HEADER)
        self.instructions_canvas.create_text(250, 120, text = "Try your best to answer all the questions!", font = self.FONT_LABEL)
        self.instructions_canvas.create_text(250, 180, text = "What is your name?", font = self.FONT_LABEL)

        # Create the entry.
        self.name_entry = Entry(self.instructions_window, justify = "center", font = self.FONT_LABEL)
        self.instructions_canvas.create_window(250, 220, window = self.name_entry)

        # Create the buttons.
        start_button = Button(self.instructions_window, text = "Start", command = self.name_verification, font = self.FONT_BUTTON, width = 10)
        self.instructions_canvas.create_window(250, 280, window = start_button)

        quit_button = Button(self.instructions_window, text = "Quit", command = self.quit_button, font = self.FONT_BUTTON, width = 10)
        self.instructions_canvas.create_window(250, 340, window = quit_button)


    # This is a function that creates the difficulty window.
    def create_difficulty_window(self):

        # This hides the instructions window and unhides the difficulty window.
        self.difficulty_window.deiconify()
        self.instructions_window.withdraw()

        # Load and resize the background image.
        original_image = Image.open("background.png")
        resized_image = original_image.resize((500, 400))
        self.difficulty_background_colour = ImageTk.PhotoImage(resized_image)

        # Set up the canvas.
        self.difficulty_canvas = Canvas(self.difficulty_window, highlightthickness = 0)
        self.difficulty_canvas.place(x = 0, y = 0, width = 500, height = 400)

        # Draw the background image.
        self.difficulty_canvas.create_image(0, 0, image = self.difficulty_background_colour, anchor = "nw")

        # Create the labels.
        self.difficulty_canvas.create_text(250, 60, text = "Difficulty", font = self.FONT_HEADER)

        self.difficulty_canvas.create_text(250, 120, text = "Which difficulty would you like to choose!", font = self.FONT_LABEL)

        # Create the buttons.
        basic_button = Button(self.difficulty_window, text = "Basic", command = self.basic_questions, font = self.FONT_BUTTON, width = 10)
        self.difficulty_canvas.create_window(250, 200, window = basic_button)

        advanced_button = Button(self.difficulty_window, text = "Advanced", command = self.advanced_questions, font = self.FONT_BUTTON, width = 10)
        self.difficulty_canvas.create_window(250, 260, window = advanced_button)

        expert_button = Button(self.difficulty_window, text = "Expert", command = self.expert_questions, font = self.FONT_BUTTON, width = 10)
        self.difficulty_canvas.create_window(250, 320, window = expert_button)

    # This is a function that creates the questions window.
    def create_questions_window(self):

        # Hide the difficulty window and unhide the questions window.
        self.question_window.deiconify()
        self.difficulty_window.withdraw()

        # Load and resize the background image.
        original_image = Image.open("background.png")
        resized_image = original_image.resize((500, 400))
        self.questions_background_colour = ImageTk.PhotoImage(resized_image)

        # Set up the canvas.
        self.questions_canvas = Canvas(self.question_window, highlightthickness = 0)
        self.questions_canvas.place(x = 0, y = 0, width = 500, height = 400)

        # Draw the background image.
        self.questions_canvas.create_image(0, 0, image = self.questions_background_colour, anchor = "nw")

        # Create the header label.
        self.questions_canvas.create_text(250, 60, text = "Questions", font = self.FONT_HEADER)

        # Create the question label which will be updated.
        self.question_text = self.questions_canvas.create_text(250, 140, text = "", font = self.FONT_LABEL)

        # Create the answer entry.
        self.answer_entry = Entry(self.question_window, justify = "center", font = self.FONT_LABEL)
        self.questions_canvas.create_window(250, 200, window = self.answer_entry)

        # Binds the enter key to submit.
        self.answer_entry.bind("<Return>", lambda event: self.submit_answer())

        # Create the buttons.
        submit_button = Button(self.question_window, text = "Submit", command = self.submit_answer, font = self.FONT_BUTTON, width = 10)
        self.questions_canvas.create_window(250, 260, window = submit_button)

        quit_button = Button(self.question_window, text = "Quit", command = self.quit_button, font = self.FONT_BUTTON, width = 10)
        self.questions_canvas.create_window(250, 320, window = quit_button)

        # Create the timer directly on the canvas.
        self.timer_text = self.questions_canvas.create_text(250, 360, text = "Time Left: 10s", font = self.FONT_LABEL)

        # Start the timer.
        self.update_timer()


    # This is a function that creates the leaderboard window.
    def create_leaderboard_window(self):

        # This hides the question window and unhides the leaderboard window.
        self.leaderboard_window.deiconify()
        if self.questions_window is not None:
            self.questions_window.withdraw()

        # Load and resize the background image.
        original_image = Image.open("background.png")
        resized_image = original_image.resize((500, 400))
        self.leaderboard_background_colour = ImageTk.PhotoImage(resized_image)

        # Set up the canvas.
        self.leaderboard_canvas = Canvas(self.leaderboard_window, highlightthickness = 0)
        self.leaderboard_canvas.place(x = 0, y = 0, width = 500, height = 400)

        # Draw the background image.
        self.leaderboard_canvas.create_image(0, 0, image = self.leaderboard_background_colour, anchor = "nw")

        # Create the labels.
        self.leaderboard_canvas.create_text(250, 60, text = "Leaderboard", font = self.FONT_HEADER)
        self.leaderboard_canvas.create_text(175, 100, text = "Rank", font = self.LEADERBOARD_LABEL, anchor = "e")
        self.leaderboard_canvas.create_text(210, 100, text = "Name", font = self.LEADERBOARD_LABEL,  anchor = "w")
        self.leaderboard_canvas.create_text(350, 100, text = "Score", font = self.LEADERBOARD_LABEL)
        
        top_10 = self.leaderboard.get_top_scores()

        # For loop to place all the values on the leaderboard window
        for i, (name, score) in enumerate(top_10, start = 1):
            y_position = 120 + (i - 1) * 20
            self.leaderboard_canvas.create_text(175, y_position, text = f"{i}.", font =self.FONT_LABEL, anchor = "e")
            self.leaderboard_canvas.create_text(210, y_position, text = name, font = self.FONT_LABEL, anchor = "w")
            self.leaderboard_canvas.create_text(350, y_position, text = str(score), font = self.FONT_LABEL, anchor = "center")

        # Create the buttons.
        restart_button = Button(self.leaderboard_window, text = "Restart", command = self.restart_quiz, font = self.FONT_BUTTON, width = 10)
        self.leaderboard_canvas.create_window(175, 350, window = restart_button)

        quit_button = Button(self.leaderboard_window, text = "Quit", command = self.quit_button, font = self.FONT_BUTTON, width = 10)
        self.leaderboard_canvas.create_window(325, 350, window = quit_button)
        
            
    # This is a function that sets up the difficulty and generates questions based on what the user has chosen.
    def start_quiz(self, difficulty, question_generator):

        # Set the difficulty to the chosen difficulty by the user.
        self.current_difficulty = difficulty

        # Creates the questions window.
        self.create_questions_window()

        # Writes the question.
        self.questions_canvas.itemconfig(self.question_text, text = question_generator())

        # Deletes the entry box and resets the focus.
        self.answer_entry.delete(0, END)
        self.answer_entry.focus()


    # This is a function that appears when the quiz is over.
    def end_quiz(self):

        # Cancel the timer.
        if hasattr(self, 'timer_id'):
            self.question_window.after_cancel(self.timer_id)
 
        # Show the user their score.
        messagebox.showinfo("Score", f"Your score is {self.score} out of {self.questions_answered} questions answered.")

        # Save the score to a CSV file.
        self.leaderboard.save_score(self.name_entry.get().title(), self.score)
        
        # Call the leaderboard function.
        self.create_leaderboard_window()


    # This is a function that restarts the quiz.
    def restart_quiz(self):

        # Cancel the timer.
        if hasattr(self, 'timer_id'):
            self.question_window.after_cancel(self.timer_id)

        # Reset variables.
        self.score = 0
        self.questions_answered = 0
        self.time_left = 10

        # This hides the question and leaderboard window and unhides the instructions window.
        self.question_window.withdraw()
        self.leaderboard_window.withdraw()
        self.instructions_window.deiconify()


    # This is a function that asks the user if they're sure they want to quit.
    def quit_button(self):

        # This asks the user if they're sure they want to quit.
        confirm = messagebox.askyesno("Confirm Quit", "Are you sure you want to quit?")

        # If they say yes, the program closes.
        if confirm:
            self.instructions_window.destroy()


    # This is a function to validate the name entry.
    def name_verification(self):

        # This capitalises the name entry.
        name = self.name_entry.get().title()

        # Checks if the name is an alphabet.
        if name.replace(" ", "").replace("-", "").replace("'", "").isalpha():
            # If the name is valid, create the next window.
            self.create_difficulty_window()

        else:
            # Create the error message.
            messagebox.showinfo("Invalid Name", "❌ Please enter a valid name!")
            self.name_entry.delete(0, END)
            self.name_entry.focus()


    # This is a function that validates the answer entry.
    def validator(self, user_input):

        # Check if the input is blank (empty or only spaces)
        if user_input.strip() == "":
            messagebox.showinfo("Blank", "❌ Have a guess!")
            return False
        
        # Checks if the entry has any digits.
        elif user_input.replace("-", "").isdigit() == False:
            # Checks if the entry has any letters of the alphabet and show an error message.
            if user_input.replace("-", "").isalnum() == True:
                messagebox.showinfo("Alphabet", "❌ Please don't enter any letters!")

            # Checks if the entry has any whitespace and show an error message.
            elif " " in user_input:
                messagebox.showinfo("Whitespace", "❌ Please don't enter any spaces!")

            # Checks if the entry has any symbols and show an error message.
            else:
                messagebox.showinfo("Symbols", "❌ Please don't enter any symbols!")

        # Checks if the entry has too many characters and show an error message.
        elif len(user_input) > 6:
            messagebox.showinfo("Character Limit", "❌ Character limit has been breached!")

        # If the entry is valid, return true.
        else:
            return True

        # Deletes the entry box and resets the focus.
        self.answer_entry.delete(0, END)
        self.answer_entry.focus()

        # If the entry is invalid, return false.
        return False


    # This is a function that checks whether the user got the answer correct.
    def submit_answer(self):
        # Gets the answer entry.
        user_input = self.answer_entry.get()

        # Checks if the answer is valid, expert difficulty answers are bypassed.
        if self.current_difficulty == "expert" or self.validator(user_input):
            if self.current_difficulty == "expert":
                user_input_clean = user_input.replace(" ", "").lower()
                correct_clean = str(self.correct_answer).replace(" ", "").lower()
                # Checks if the answer is correct.
                if user_input_clean == correct_clean:
                    messagebox.showinfo("Correct!", "✅ Correct!")
                    self.score += 1

                else:
                    messagebox.showinfo("Incorrect", f"❌ The correct answer was {self.correct_answer}.")
            else:
                # Checks if the answer is correct.
                if int(user_input) == self.correct_answer:
                    messagebox.showinfo("Correct!", "✅ Correct!")
                    self.score += 1

                else:
                    messagebox.showinfo("Incorrect", f"❌ The correct answer was {self.correct_answer}.")

            # Generates another question.
            if self.current_difficulty == "basic":
                self.questions_canvas.itemconfig(self.question_text, text = self.generate_basic_question())

            elif self.current_difficulty == "advanced":
                self.questions_canvas.itemconfig(self.question_text, text = self.generate_advanced_question())

            else:
                self.questions_canvas.itemconfig(self.question_text, text = self.generate_expert_question())

            # Increases the questions answered variable by 1.
            self.questions_answered += 1

            # Deletes the answer entry and resets the focus.
            self.answer_entry.delete(0, END)
            self.answer_entry.focus()
    

    # This is a function that updates the timer.
    def update_timer(self):

        # If there is still time left, reduce the time by one second and display it on the label.
        if self.time_left > 0:
            self.time_left -= 1
            self.questions_canvas.itemconfig(self.timer_text, text = f"Time Left: {self.time_left}s")
            self.timer_id = self.question_window.after(1000, self.update_timer)

        # If there is no time left, end the quiz.
        else:
            self.end_quiz()

    
    # This is a function that generates randomised basic questions.
    def generate_basic_question(self):

        # Creates random numbers.
        num1 = random.randint(1, 12)
        num2 = random.randint(1, 12)
        question_type = random.randint(1, 4)

        # Creates an addition question.
        if question_type == 1:
            self.correct_answer = num1 + num2
            return f"What is {num1} + {num2}?"

        # Creates a subtraction question.
        elif question_type == 2:
            self.correct_answer = num1 - num2
            return f"What is {num1} - {num2}?"

        # Creates a multiplication question.
        elif question_type == 3:
            self.correct_answer = num1 * num2
            return f"What is {num1} × {num2}?"

        # Creates a division question.
        else:
            num1 *= num2
            self.correct_answer = num1 // num2
            return f"What is {num1} ÷ {num2}?"


    # This is a function that creates the questions window for basic questions.
    def basic_questions(self):
        self.start_quiz("basic", self.generate_basic_question)


    # This is a function that generates randomised advanced questions.
    def generate_advanced_question(self):

        # Determines which type of question will be asked.
        question_type = random.randint(1, 5)

        # Creates an addition question.
        if question_type == 1:
            num1 = random.randint(100, 500)
            num2 = random.randint(100, 500)
            self.correct_answer = num1 + num2
            return f"What is {num1} + {num2}?"

        # Creates a subtraction question.
        elif question_type == 2:
            num1 = random.randint(100, 500)
            num2 = random.randint(1, 100)
            self.correct_answer = num1 - num2
            return f"What is {num1} - {num2}?"

        # Creates a multiplication question.
        elif question_type == 3:
            num1 = random.randint(12, 30)
            num2 = random.randint(12, 30)
            self.correct_answer = num1 * num2
            return f"What is {num1} × {num2}?"

        # Creates a division question.
        elif question_type == 4:
            num2 = random.randint(12, 20)
            self.correct_answer = random.randint(12, 20)
            num1 = num2 * self.correct_answer
            return f"What is {num1} ÷ {num2}?"

        # Creates a power question.
        else:
            base = random.randint(2, 5)
            exponent = random.randint(2, 4)
            self.correct_answer = base ** exponent
            return f"What is {base} ^ {exponent}?"


    # This is a function that creates the questions window for advanced questions.
    def advanced_questions(self):
        self.start_quiz("advanced", self.generate_advanced_question)

        
    # This is a function that generates randomised expert questions.
    def generate_expert_question(self):

        # Determines which type of question will be asked.
        question_type = random.randint(1, 2)

        # Derivative questions.
        if question_type == 1:
            coefficient = random.randint(3, 10)
            exponent = random.randint(3, 5)
            new_coefficient = coefficient * exponent
            new_exponent = exponent - 1

            # Removes the 1 from the beginning of the answer.
            if new_exponent == 1:
                if new_coefficient == 1:
                    self.correct_answer = "x"
                else:
                    self.correct_answer = f"{new_coefficient}x"

            # Removes the ^1 from the answer.
            elif new_exponent == 0:
                self.correct_answer = f"{new_coefficient}"

            else:
                if new_coefficient == 1:
                    self.correct_answer = f"x^{new_exponent}"
                else:
                    self.correct_answer = f"{new_coefficient}x^{new_exponent}"

            # Returns the question being asked.
            return f"What is the derivative of {coefficient}x^{exponent}?"

        # Integration questions.
        else:
            coefficient = random.randint(3, 10)
            exponent = random.randint(2, 5)
            new_exponent = exponent + 1

            gcd = math.gcd(coefficient, new_exponent)
            simplified_coeffecient = coefficient // gcd
            simplified_denominator = new_exponent // gcd

            # Simplifies the answer.
            if simplified_denominator == 1:
                if simplified_coeffecient == 1:
                    self.correct_answer = f"x^{new_exponent}"
                else:
                    self.correct_answer = f"{simplified_coeffecient}x^{new_exponent}"
            else:
                if simplified_coeffecient == 1:
                    self.correct_answer = f"x^{new_exponent}/{simplified_denominator}"
                else:
                    self.correct_answer = f"{simplified_coeffecient}x^{new_exponent}/{simplified_denominator}"

            # Returns the question being asked.
            return f"Integrate {coefficient}x^{exponent}"


    # This is a function that creates the questions window for expert questions.
    def expert_questions(self):
        self.start_quiz("expert", self.generate_expert_question)
    

# Runs the class.
if __name__ == "__main__":
    app = MathsQuiz()
    app.initialise()
